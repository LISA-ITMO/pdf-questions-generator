import time
import pdfplumber
import openai
import json
from fastapi import UploadFile, HTTPException
from config import MAX_GPT_REQUESTS_PER_UPLOAD, OPENAI_API_KEY

openai.api_key = OPENAI_API_KEY

def chunk_text(text, max_words=200):
    words = text.split()
    return [" ".join(words[i:i+max_words]) for i in range(0, len(words), max_words)]

async def process_pdf(file: UploadFile):
    contents = await file.read()
    with pdfplumber.open(file.file) as pdf:
        full_text = "\n".join([p.extract_text() or '' for p in pdf.pages])

    chunks = chunk_text(full_text)
    responses = []

    for i, chunk in enumerate(chunks):
        if i >= MAX_GPT_REQUESTS_PER_UPLOAD:
            break

        points = extract_theses(chunk)
        questions = extract_questions(points)
        responses.append({"theses": points, "questions": questions})

    return {"results": responses}

def extract_theses(text):
    system_prompt = "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –í—ã–¥–µ–ª–∏ 3‚Äì5 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–∑–∏—Å–æ–≤ –ø–æ –≤—Ö–æ–¥–Ω–æ–º—É –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–º—É —Ç–µ–∫—Å—Ç—É. –°–ø–∏—Å–æ–∫."
    res = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "system", "content": system_prompt}, {"role": "user", "content": text}],
        max_tokens=400
    )
    return res.choices[0].message.content

def extract_questions(theses):
    prompt = (
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —ç—Ç–∏–º —Ç–µ–∑–∏—Å–∞–º –≤ JSON-–º–∞—Å—Å–∏–≤–µ. "
        "–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n"
        "- question\n- type ('single', 'multi', 'true_false')\n- options\n- answer"
    )
    res = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "system", "content": prompt}, {"role": "user", "content": theses}],
        max_tokens=600
    )

    raw = res.choices[0].message.content.strip()

    # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –æ–±—ë—Ä—Ç–∫–∏ ```json ... ```
    if raw.startswith("```json"):
        raw = raw[len("```json"):].strip()
    if raw.endswith("```"):
        raw = raw[:-3].strip()

    try:
        return json.loads(raw)
    except json.JSONDecodeError as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e)
        print("üì¶ GPT –æ—Ç–≤–µ—Ç:", raw)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT.")
